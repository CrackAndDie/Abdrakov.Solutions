<UserControl x:Class="Abdrakov.CommonWPF.Views.Other.WindowHeaderView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Abdrakov.CommonWPF.Views.Other"
             xmlns:converters="clr-namespace:Abdrakov.CommonWPF.Converters"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d"
             d:DesignHeight="22"
             d:DesignWidth="800"
             x:Name="windowHeaderView">
    <Control.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <converters:NullImageConverter x:Key="nullImageConverter" />

            <Style x:Key="TitleBarButtonStyle"
                   TargetType="{x:Type Button}">
                <Setter Property="Foreground"
                        Value="{DynamicResource WindowTextBrush}" />
                <Setter Property="Padding"
                        Value="0" />
                <Setter Property="WindowChrome.IsHitTestVisibleInChrome"
                        Value="True" />
                <Setter Property="IsTabStop"
                        Value="False" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border"
                                    Background="Transparent"
                                    BorderThickness="0"
                                    SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter"
                                                  Margin="0"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  Focusable="False"
                                                  RecognizesAccessKey="True" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver"
                                         Value="true">
                                    <Setter TargetName="border"
                                            Property="Background"
                                            Value="Gray" />
                                </Trigger>
                                <Trigger Property="IsPressed"
                                         Value="true">
                                    <Setter TargetName="border"
                                            Property="Background"
                                            Value="DarkGray" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="TitleBarCloseButtonStyle"
                   TargetType="{x:Type Button}">
                <Setter Property="Foreground"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                <Setter Property="Padding"
                        Value="0" />
                <Setter Property="WindowChrome.IsHitTestVisibleInChrome"
                        Value="True" />
                <Setter Property="IsTabStop"
                        Value="False" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border"
                                    Background="Transparent"
                                    BorderThickness="0"
                                    SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter"
                                                  Margin="0"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  Focusable="False"
                                                  RecognizesAccessKey="True" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver"
                                         Value="true">
                                    <Setter TargetName="border"
                                            Property="Background"
                                            Value="Red" />
                                </Trigger>
                                <Trigger Property="IsPressed"
                                         Value="true">
                                    <Setter TargetName="border"
                                            Property="Background"
                                            Value="DarkRed" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Control.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="22" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="36" />
            <ColumnDefinition Width="40" />
            <ColumnDefinition Width="36" />
            <ColumnDefinition Width="30" />
            <ColumnDefinition Width="30" />
            <ColumnDefinition Width="30" />
        </Grid.ColumnDefinitions>
        <Image Grid.Column="0"
               Width="20"
               Height="20"
               Margin="1"
               x:Name="UpperLogoImage"
               Source="{Binding LogoImage, ElementName=windowHeaderView, Converter={StaticResource nullImageConverter}}"
               RenderOptions.BitmapScalingMode="Fant" />
        <TextBlock Grid.Column="1"
                   Margin="4 0 0 0"
                   VerticalAlignment="Center"
                   FontSize="14"
                   Text="{Binding ProductName, ElementName=windowHeaderView}"
                   Foreground="{DynamicResource TextForegroundBrush}">
            <TextBlock.Style>
                <Style TargetType="TextBlock">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}"
                                     Value="False">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource TextForegroundBrush}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}"
                                     Value="True">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource TextForegroundBrush}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </TextBlock.Style>
        </TextBlock>
        <Button Grid.Column="8"
                Command="{Binding MinimizeWindowCommand, ElementName=windowHeaderView}"
                CommandParameter="{Binding WindowParameter, ElementName=windowHeaderView}"
                Visibility="{Binding MinimizeButtonVisibility, ElementName=windowHeaderView}"
                RenderOptions.EdgeMode="Aliased"
                Style="{StaticResource TitleBarButtonStyle}">
            <Path Width="30"
                  Height="22"
                  Data="M 10,16 H 20"
                  Stroke="{DynamicResource TextForegroundBrush}"
                  StrokeThickness="1" />
        </Button>
        <Button Name="maximizeButton"
                Grid.Column="9"
                Command="{Binding MaximizeWindowCommand, ElementName=windowHeaderView}"
                CommandParameter="{Binding WindowParameter, ElementName=windowHeaderView}"
                Visibility="{Binding MaximizeButtonVisibility, ElementName=windowHeaderView}"
                Style="{StaticResource TitleBarButtonStyle}">
            <Path Width="30"
                  Height="22"
                  Data="M 11,7 H 19 V 15 H 11 Z"
                  Stroke="{DynamicResource TextForegroundBrush}"
                  StrokeThickness="1" />
        </Button>
        <Button Name="restoreButton"
                Visibility="{Binding RestoreButtonVisibility, ElementName=windowHeaderView}"
                Grid.Column="9"
                Command="{Binding RestoreWindowCommand, ElementName=windowHeaderView}"
                CommandParameter="{Binding WindowParameter, ElementName=windowHeaderView}"
                Style="{StaticResource TitleBarButtonStyle}">
            <Path Width="30"
                  Height="22"
                  Data="M 10,8 H 17 V 15 H 10 Z M 12,8 V 6 H 19 V 13 H 17"
                  Stroke="{DynamicResource TextForegroundBrush}"
                  StrokeThickness="1" />
        </Button>
        <Button Grid.Column="10"
                Command="{Binding CloseWindowCommand, ElementName=windowHeaderView}"
                CommandParameter="{Binding WindowParameter, ElementName=windowHeaderView}"
                Style="{StaticResource TitleBarCloseButtonStyle}">
            <Path Width="30"
                  Height="22"
                  Data="M 11,7 19,15 M 11,15 19,7"
                  Stroke="{DynamicResource TextForegroundBrush}"
                  StrokeThickness="1" />
        </Button>

        <ToggleButton WindowChrome.IsHitTestVisibleInChrome="True"
                      ToolTip="ThemeMode"
                      Grid.Column="6"
                      IsChecked="False"
                      Padding="0"
                      Foreground="Black"
                      Background="{DynamicResource SecondaryMidBrush}"
                      Visibility="{Binding ThemeToggleVisibility, ElementName=windowHeaderView}" 
                      Click="ThemeModeToggleButton_Click"
                      x:Name="ThemeModeToggle">
            <materialDesign:PackIcon Kind="WhiteBalanceSunny">
            </materialDesign:PackIcon>
            <materialDesign:ToggleButtonAssist.OnContent>
                <materialDesign:PackIcon Kind="MoonWaningCrescent" />
            </materialDesign:ToggleButtonAssist.OnContent>
            <materialDesign:ToggleButtonAssist.SwitchTrackOnBackground>
                <SolidColorBrush Color="{DynamicResource SecondaryMidBrushColor}" />
            </materialDesign:ToggleButtonAssist.SwitchTrackOnBackground>
            <materialDesign:ToggleButtonAssist.SwitchTrackOffBackground>
                <SolidColorBrush Color="{DynamicResource PrimaryVeryDarkBrushColor}" />
            </materialDesign:ToggleButtonAssist.SwitchTrackOffBackground>
        </ToggleButton>

        <ProgressBar x:Name="ProgressAsyncPB"
                     ToolTip="Обновление данных приложения"
                     Style="{StaticResource MaterialDesignCircularProgressBar}"
                     Foreground="{DynamicResource SecondaryMidBrush}"
                     Value="0"
                     Grid.Column="7"
                     Width="18"
                     Height="18"
                     IsIndeterminate="True"
                     Margin="0, 0"
                     IsHitTestVisible="False"
                     Visibility="{Binding ProgressBarVisibility, ElementName=windowHeaderView}" />
        <materialDesign:PackIcon Kind="CheckAll"
                                 x:Name="AllDonePI"
                                 ToolTip="Приложение готово к работе"
                                 Foreground="{DynamicResource SecondaryMidBrush}"
                                 Grid.Column="7"
                                 VerticalAlignment="Center"
                                 Margin="10, 0"
                                 IsHitTestVisible="False"
                                 Visibility="{Binding CheckAllDoneVisibility, ElementName=windowHeaderView}" />
    </Grid>
</UserControl>
